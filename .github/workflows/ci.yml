---
name: "CI"
on:  # yamllint disable
  - "pull_request"
env:
  PROD_NAUTOBOT_URL: ${{ secrets.PROD_NAUTOBOT_URL }}
  PROD_NAUTOBOT_TOKEN: ${{ secrets.PROD_NAUTOBOT_TOKEN }}
jobs:
  yamllint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DOCKER_COMPOSE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
  # unittest:
  #   needs: "yamllint"
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       # python-version: ["3.10"]
  #       # db-backend: ["postgresql"]
  #       # nautobot-version: ["stable"]
  #       include:
  #         - python-version: "3.11"
  #           db-backend: "postgresql"
  #           nautobot-version: "2.3.6"
  #   runs-on: "ubuntu-22.04"
  #   env:
  #     INVOKE_NAUTOBOT_DOCKER_COMPOSE_PYTHON_VER: "${{ matrix.python-version }}"
  #     INVOKE_NAUTOBOT_DOCKER_COMPOSE_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v4"
  #     - name: "Setup environment"
  #       uses: "networktocode/gh-action-setup-poetry-environment@v6"
  #     - name: "Copy credentials"
  #       run: "cp environments/creds.example.env environments/creds.env"
  #     - name: "Copy local ENV vars"
  #       run: "cp environments/local.example.env environments/local.env"
  #     - name: "Constrain Nautobot version and regenerate lock file"
  #       env:
  #         INVOKE_NAUTOBOT_DEVICE_ONBOARDING_LOCAL: "true"
  #       run: "poetry run invoke lock --constrain-nautobot-ver --constrain-python-ver"
  #     - name: "Set up Docker Buildx"
  #       id: "buildx"
  #       uses: "docker/setup-buildx-action@v3"
  #     - name: "Build"
  #       uses: "docker/build-push-action@v5"
  #       with:
  #         builder: "${{ steps.buildx.outputs.name }}"
  #         context: "./"
  #         push: false
  #         load: true
  #         file: "./environments/Dockerfile"
  #         cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
  #         cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
  #         build-args: |
  #           NAUTOBOT_VER=${{ matrix.nautobot-version }}
  #           PYTHON_VER=${{ matrix.python-version }}
  #           CI=true
  #     - name: "Run Tests"
  #       run: "poetry run invoke unittest"
  sync_jobs_repo:
    # needs: "unittest"
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DOCKER_COMPOSE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Install dependencies"
        run: "poetry install"
      - name: "Sync Jobs Repo"
        run: "poetry run python sync_jobs_repo.py"
  run_design_jobs_DRYRUN:
    needs: "sync_jobs_repo"
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DOCKER_COMPOSE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Install dependencies"
        run: "poetry install --no-root"
      - name: "DRYRUN Run Design Jobs"
        run: "poetry run python DRYRUN_run_design_jobs.py"
  ### This should run only upon new release.
  run_design_jobs:
    needs: "run_design_jobs_DRYRUN"
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_DOCKER_COMPOSE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
      - name: "Install dependencies"
        run: "poetry install --no-root"
      - name: "Run Design Jobs"
        run: "poetry run python run_design_jobs.py"